from __future__ import print_function
from django.contrib.auth import authenticate, login
from django.contrib.auth import logout
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404
from django.db.models import Q
from .forms import cvemappingForm, UploadForm
from .models import cvemapping
import os,sys,csv,subprocess,openpyxl



i=1
j=1
cves=[]
dirs={'exploitdb':'exploitdb','nmap':'nmap/scripts'}
basedir=os.getcwd()
nmap=[]
exploitdb=[]
def core(key,path,l,choice):
        result=""
        global exploitdb,i,j,nmap
        if key=="exploitdb" and choice!=2:
               print("Searching in "+path)
               res1= subprocess.getoutput('grep -R \"\''+l+'\'\" '+path)
               res2= subprocess.getoutput('grep -Riw \"'+"CVE-"+l+'\" '+path)
               result=res1 if res1 else res2
        if key=="nmap" and choice!=1:
               print("Searching in "+path)
               result= subprocess.getoutput('grep -R \"'+l+'\" '+path)
        print(result)
        fullpath=result.split(':')[0]
        id1=os.path.basename(fullpath)
        id1=os.path.splitext(id1)[0]
        if result and key=="exploitdb":
               result= "https://www.exploit-db.com/exploits/"+id1
               exploitdb.append(str(i)+" . "+"CVE-"+l+" => "+fullpath+" => "+result)
               i+=1
        if result and key=="nmap":
               result="https://github.com/nmap/nmap/tree/master/scripts/"+id1
               nmap.append(str(j)+" . "+"CVE-"+l+" => "+fullpath+" => "+result)
               j+=1

def search1(cves1,choice,request):        
        cves1=set(cves1)
        cves1=list(cves1)
        cves=[x for x in cves1 if x!=""]
        for l in cves:
               l=l.rstrip()
               l=l[4:]
#               print("\033c")
               if l!="":
                      print("\033[1;32mSearching For \033[1;97mCVE-"+l)
                      for key,path in dirs.items():
                              core(key,path,l,choice)
def download(input1):
                print("Downloading/Updating the "+input1+" Database...")
                if os.path.isdir(input1):
                                os.system('rm -r '+input1)
                os.system('mkdir '+input1)
                if input1=="exploitdb":
                                command='git clone https://github.com/offensive-security/exploit-database.git '+input1
                else:
                                command='git clone https://github.com/nmap/nmap.git '+input1
                process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
                process.wait()
                os.system('find . -name \"*.db\" -type f -delete')
                print("Update Completed....")

def cvesearch(cves,update,choice,request):
                for key,path in dirs.items():
                                print(path)
                                if os.path.isdir(path):
#                                                if update.lower()=='y' or update.lower()=='yes':
                                                if update:
                                                                download(key)
                                else:
                                                print(key+" Database Not Found")
                                                download(key)
                search1(cves,choice,request)

def handle_uploaded_file(request,opt,file1,update,choice):
    global exploitdb,nmap,i,j,cves
    i=1
    j=1
    exploitdb=[]
    nmap=[]
    cves=[]
    print(file1)
    file1=basedir+file1
    print("OPTION:"+str(opt)+"\nFile:"+str(file1)+"\nUpdate:"+str(update)+"\nChoice:"+str(choice))
    if opt == 0:
        print("Place the CSV in the same folder where executable is present")
        if os.path.isfile(file1):
            f=open(file1,'rt')
            reader=csv.reader(f,delimiter=',')
            for row in reader:
                cves.append(row[3])
                f.close()
                cvesearch(cves,update,choice)
        else:
            print("Invalid File Selected")
    if opt==1:
        print("Place the XLSX in the same folder where executable is present")
        if os.path.isfile(file1):
               wb = openpyxl.load_workbook(file1)
               ws = wb.get_sheet_by_name('Sheet1')
               for row in ws.iter_rows('A{}:A{}'.format(ws.min_row+2,ws.max_row)):
                   for cell in row:
                       cves.append(str(cell.value))
               cvesearch(cves,update,choice)
        else:
               print("Invalid File Selected")
    if opt == 2:
        print("Place the TEXT File in the same Folder "+file1)
        if os.path.isfile(file1):
            print("file detected")
            with open(file1) as f:
                for l in f.readlines():
                    cves.append(l)
            cvesearch(cves,update,choice,request)
        else:
            print("Invalid File Selected")
    if opt == 3:
        print("Single CVE Search")
        inp = input("Enter the full CVE number including CVE keyword: ")
        cves.append(inp)
        cvesearch(cves)
    #print("\033c")
    print("\033[1;31mNumber of CVE scanned: \033[1;m"+str(len(cves)))
    val1="Number of CVE scanned: %s"%(str(len(cves)))
    print("\033[1;31mNumber of CVE Found: \033[1;m"+str(len(exploitdb)))
    val2="Number of CVE Found: %s "%(str(len(exploitdb)))
    print("\033[1;31mExploit Available for below CVE")
    val3="Exploit Available for below CVE:%s"%exploitdb
    for i in exploitdb:
       print("\033[1;m"+str(i))
    val4="Exploit Available for below CVE:%s"%nmap
    print("\033[1;31mNMAP Script Available for below CVE")
    for i in nmap:
       print("\033[1;m"+str(i))
    '''form = cvemappingForm(request.POST or None, request.FILES or None)
    cvemapping = form.save(commit=False)
    cvemapping.cvemapping_logo="Number of CVE Scanned: %s"%str(len(cves))
    cvemapping.artist="Number of CVE Found: %s"%str(len(exploitdb))
    cvemapping.genre="ExploitDB: %s"%exploitdb
    cvemapping.update_check="Nmap: %s"%nmap
    cvemapping.choice=""'''
    fin=[]
    fin.insert(0,str(len(cves)))
    fin.insert(1,str(len(exploitdb)))
    fin.insert(2,exploitdb)
    fin.insert(3,nmap)
    #cvemapping.cvemapping_logo.url="Nmap: %s"%nmap
    return val1,val2,val3,val4


from __future__ import print_function
from django.contrib.auth import authenticate, login
from django.contrib.auth import logout
from django.http import JsonResponse
from django.shortcuts import render, get_object_or_404
from django.db.models import Q
from .forms import cvemappingForm, UploadForm
from .models import cvemapping
from .cvesearch import handle_uploaded_file


UPLOAD_FILE_TYPES = ['csv', 'txt', 'xlsx']


def create_cvemapping(request):
        form = cvemappingForm(request.POST or None, request.FILES or None)
        if form.is_valid():
            cvemapping = form.save(commit=False)
            cvemapping.cvemapping_logo = request.FILES['cvemapping_logo']
            file_type = cvemapping.cvemapping_logo.url.split('.')[-1]
            file_type = file_type.lower()
            print(file_type)
            if (file_type not in UPLOAD_FILE_TYPES) :
                context = {
                    'cvemapping': cvemapping,
                    'form': form,
                    'error_message': 'Unsupported File Format Selected',
                }
                #return subprocess.check_output(['python', 'cvesearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'CVE/create_cvemapping.html', context)
            if (file_type!="txt" and cvemapping.artist==2):
                context = {
                    'cvemapping': cvemapping,
                    'form': form,
                    'error_message': 'Check the source Option - Please Upload Valid TXT File',
                }
                #return subprocess.check_output(['python', 'cvesearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'CVE/create_cvemapping.html', context)
            if (file_type!="csv" and cvemapping.artist==0):
                context = {
                    'cvemapping': cvemapping,
                    'form': form,
                    'error_message': 'Check the source Option - Please Upload Valid CSV File',
                }
                #return subprocess.check_output(['python', 'cvesearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'CVE/create_cvemapping.html', context)
            if (file_type!="xlsx" and cvemapping.artist==1) :
                context = {
                    'cvemapping': cvemapping,
                    'form': form,
                    'error_message': 'Check the source Option - Please Upload Valid XLSX File',
                }
                #return subprocess.check_output(['python', 'cvesearch.py', handle_uploaded_file("1")]).decode('utf-8')
                return render(request, 'CVE/create_cvemapping.html', context)
            cvemapping.save()
            #handle_uploaded_file(cvemapping.artist, cvemapping.cvemapping_logo.url,cvemapping.update_check, cvemapping.choice)
            dict1={'total':'','found':'','exploitdb':'','nmap':''}
            fin=[]
            cvemapping.val1,cvemapping.val2,cvemapping.val3,cvemapping.val4=handle_uploaded_file(request,cvemapping.artist, cvemapping.cvemapping_logo.url,cvemapping.update_check, cvemapping.choice)
#            cvemapping.choice=fin[2]
#            cvemapping.genre=fin[3]
            return render(request, 'CVE/detail.html', {'cvemapping': cvemapping})
        context = {
            "form": form,
        }
        return render(request, 'CVE/create_cvemapping.html', context)



def create_file(request):
        form = UploadForm(request.POST or None, request.FILES or None)
        if form.is_valid():
            files = form.save(commit=False)
            files.file = request.FILES
            files.save()
            return render(request, 'CVE/index.html', {'file': files})
        context = {
            'form': form,
        }
        return render(request, 'CVE/index.html', context)


def delete_cvemapping(request, cvemapping_id):
    cvemapping = cvemapping.objects.get(pk=cvemapping_id)
    cvemapping.delete()
    cvemappings = cvemapping.objects.filter(user=request.user)
    return render(request, 'CVE/index.html', {'cvemappings': cvemappings})


def delete_song(request, cvemapping_id, song_id):
    cvemapping = get_object_or_404(cvemapping, pk=cvemapping_id)
    song = Song.objects.get(pk=song_id)
    song.delete()
    return render(request, 'CVE/detail.html', {'cvemapping': cvemapping})


def detail(request, cvemapping_id):
    if not request.user.is_authenticated():
        return render(request, 'CVE/login.html')
    else:
        user = request.user
        cvemapping = get_object_or_404(cvemapping, pk=cvemapping_id)
        return render(request, 'CVE/detail.html', {'cvemapping': cvemapping, 'user': user})


def favorite(request, song_id):
    song = get_object_or_404(Song, pk=song_id)
    try:
        if song.is_favorite:
            song.is_favorite = False
        else:
            song.is_favorite = True
        song.save()
    except (KeyError, Song.DoesNotExist):
        return JsonResponse({'success': False})
    else:
        return JsonResponse({'success': True})


def favorite_cvemapping(request, cvemapping_id):
    cvemapping = get_object_or_404(cvemapping, pk=cvemapping_id)
    try:
        if cvemapping.is_favorite:
            cvemapping.is_favorite = False
        else:
            cvemapping.is_favorite = True
        cvemapping.save()
    except (KeyError, cvemapping.DoesNotExist):
        return JsonResponse({'success': False})
    else:
        return JsonResponse({'success': True})


def index(request):
    if not request.user.is_authenticated():
        return render(request, 'CVE/login.html')
    else:
        cvemappings = cvemapping.objects.filter(user=request.user)
        song_results = Song.objects.all()
        query = request.GET.get("q")
        if query:
            cvemappings = cvemappings.filter(
                Q(cvemapping_title__icontains=query) |
                Q(artist__icontains=query)
            ).distinct()
            song_results = song_results.filter(
                Q(song_title__icontains=query)
            ).distinct()
            return render(request, 'CVE/index.html', {
                'cvemappings': cvemappings,
                'songs': song_results,
            })
        else:
            return render(request, 'CVE/index.html', {'cvemappings': cvemappings})


def logout_user(request):
    logout(request)
    form = UserForm(request.POST or None)
    context = {
        "form": form,
    }
    return render(request, 'CVE/login.html', context)


def login_user(request):
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                cvemappings = cvemapping.objects.filter(user=request.user)
                return render(request, 'CVE/index.html', {'cvemappings': cvemappings})
            else:
                return render(request, 'CVE/login.html', {'error_message': 'Your account has been disabled'})
        else:
            return render(request, 'CVE/login.html', {'error_message': 'Invalid login'})
    return render(request, 'CVE/login.html')


def register(request):
    form = UserForm(request.POST or None)
    if form.is_valid():
        user = form.save(commit=False)
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']
        user.set_password(password)
        user.save()
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                cvemappings = cvemapping.objects.filter(user=request.user)
                return render(request, 'CVE/index.html', {'cvemappings': cvemappings})
    context = {
        "form": form,
    }
    return render(request, 'CVE/register.html', context)


def songs(request, filter_by):
    if not request.user.is_authenticated():
        return render(request, 'CVE/login.html')
    else:
        try:
            song_ids = []
            for cvemapping in cvemapping.objects.filter(user=request.user):
                for song in cvemapping.song_set.all():
                    song_ids.append(song.pk)
            users_songs = Song.objects.filter(pk__in=song_ids)
            if filter_by == 'favorites':
                users_songs = users_songs.filter(is_favorite=True)
        except cvemapping.DoesNotExist:
            users_songs = []
        return render(request, 'CVE/songs.html', {
            'song_list': users_songs,
            'filter_by': filter_by,
        })
